/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EscrowInterface extends utils.Interface {
  functions: {
    "approve()": FunctionFragment;
    "arbiter()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "depositor()": FunctionFragment;
    "isApproved()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "arbiter"
      | "beneficiary"
      | "depositor"
      | "isApproved"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "approve", values?: undefined): string;
  encodeFunctionData(functionFragment: "arbiter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "depositor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbiter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;

  events: {
    "Approved(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approved"): EventFragment;
}

export interface ApprovedEventObject {
  arg0: BigNumber;
}
export type ApprovedEvent = TypedEvent<[BigNumber], ApprovedEventObject>;

export type ApprovedEventFilter = TypedEventFilter<ApprovedEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbiter(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    depositor(overrides?: CallOverrides): Promise<[string]>;

    isApproved(overrides?: CallOverrides): Promise<[boolean]>;
  };

  approve(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbiter(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  depositor(overrides?: CallOverrides): Promise<string>;

  isApproved(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    approve(overrides?: CallOverrides): Promise<void>;

    arbiter(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    depositor(overrides?: CallOverrides): Promise<string>;

    isApproved(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approved(uint256)"(arg0?: null): ApprovedEventFilter;
    Approved(arg0?: null): ApprovedEventFilter;
  };

  estimateGas: {
    approve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbiter(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    depositor(overrides?: CallOverrides): Promise<BigNumber>;

    isApproved(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbiter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApproved(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
